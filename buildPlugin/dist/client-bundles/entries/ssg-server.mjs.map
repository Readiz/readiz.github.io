{"version":3,"file":"ssg-server.mjs","sources":["../../../src/client/entries/ssg-server.tsx"],"sourcesContent":["/**\r\n * This is the entry for static-site-generation(ssg)'s server side render.\r\n * Used in: \"ssr mode\"\r\n * (\"ssr\" is used in many places in this project to refer to \"ssg\". Should have called it ssg mode...)\r\n */\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom/server'\r\nimport { StaticRouter } from 'react-router-dom/server'\r\n\r\nimport App from '../App'\r\nimport { dataCacheCtx } from '../ctx'\r\nimport type { PagesLoaded, SSRPlugin } from '../../../clientTypes'\r\n\r\nimport ssrData from '/@react-pages/ssrData'\r\n\r\nexport { ssrData }\r\n\r\n// put all page data in cache, so that we don't need to load it in ssr\r\nconst dataCache: PagesLoaded = ssrData\r\n\r\nexport function renderToString(url: string, ssrPlugins?: SSRPlugin[]) {\r\n  let ssrApp: React.ReactNode = <SSRApp url={url} />\r\n\r\n  const extractStyleArr: (() => string)[] = []\r\n  ssrPlugins?.forEach((ssrPlugin) => {\r\n    const { app, extractStyle } = ssrPlugin.prepare(ssrApp)\r\n    if (extractStyle) extractStyleArr.push(extractStyle)\r\n    if (app) ssrApp = app\r\n  })\r\n\r\n  const contentText = ReactDOM.renderToString(ssrApp)\r\n\r\n  const styles = extractStyleArr\r\n    .map((extractStyle) => {\r\n      return extractStyle()\r\n    })\r\n    .filter(Boolean)\r\n  const styleText = styles.join('\\n')\r\n\r\n  return {\r\n    contentText,\r\n    styleText,\r\n  }\r\n}\r\n\r\nfunction SSRApp({ url }: { url: string }) {\r\n  return (\r\n    <StaticRouter\r\n      basename={import.meta.env.BASE_URL?.replace(/\\/$/, '')}\r\n      location={url}\r\n    >\r\n      <dataCacheCtx.Provider value={dataCache}>\r\n        <App />\r\n      </dataCacheCtx.Provider>\r\n    </StaticRouter>\r\n  )\r\n}\r\n"],"names":["dataCache","ssrData","renderToString","url","ssrPlugins","ssrApp","_jsx","SSRApp","extractStyleArr","forEach","ssrPlugin","app","extractStyle","prepare","push","contentText","ReactDOM","styles","map","filter","Boolean","styleText","join","StaticRouter","basename","import","meta","env","BASE_URL","replace","location","children","dataCacheCtx","Provider","value","App"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AAcA;AACA,MAAMA,SAAsB,GAAGC,OAAO,CAAA;AAE/B,SAASC,cAAcA,CAACC,GAAW,EAAEC,UAAwB,EAAE;AACpE,EAAA,IAAIC,MAAuB,gBAAGC,GAAA,CAACC,MAAM,EAAA;AAACJ,IAAAA,GAAG,EAAEA,GAAAA;AAAI,GAAE,CAAC,CAAA;EAElD,MAAMK,eAAiC,GAAG,EAAE,CAAA;AAC5CJ,EAAAA,UAAU,EAAEK,OAAO,CAAEC,SAAS,IAAK;IACjC,MAAM;MAAEC,GAAG;AAAEC,MAAAA,YAAAA;AAAa,KAAC,GAAGF,SAAS,CAACG,OAAO,CAACR,MAAM,CAAC,CAAA;AACvD,IAAA,IAAIO,YAAY,EAAEJ,eAAe,CAACM,IAAI,CAACF,YAAY,CAAC,CAAA;AACpD,IAAA,IAAID,GAAG,EAAEN,MAAM,GAAGM,GAAG,CAAA;AACvB,GAAC,CAAC,CAAA;AAEF,EAAA,MAAMI,WAAW,GAAGC,QAAQ,CAACd,cAAc,CAACG,MAAM,CAAC,CAAA;AAEnD,EAAA,MAAMY,MAAM,GAAGT,eAAe,CAC3BU,GAAG,CAAEN,YAAY,IAAK;IACrB,OAAOA,YAAY,EAAE,CAAA;AACvB,GAAC,CAAC,CACDO,MAAM,CAACC,OAAO,CAAC,CAAA;AAClB,EAAA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,IAAI,CAAC,IAAI,CAAC,CAAA;EAEnC,OAAO;IACLP,WAAW;AACXM,IAAAA,SAAAA;GACD,CAAA;AACH,CAAA;AAEA,SAASd,MAAMA,CAAC;AAAEJ,EAAAA,GAAAA;AAAqB,CAAC,EAAE;EACxC,oBACEG,GAAA,CAACiB,YAAY,EAAA;AACXC,IAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,EAAEC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAE;AACvDC,IAAAA,QAAQ,EAAE3B,GAAI;AAAA4B,IAAAA,QAAA,eAEdzB,GAAA,CAAC0B,YAAY,CAACC,QAAQ,EAAA;AAACC,MAAAA,KAAK,EAAElC,SAAU;AAAA+B,MAAAA,QAAA,eACtCzB,GAAA,CAAC6B,GAAG,EAAE,EAAA,CAAA;KACe,CAAA;AAAC,GACZ,CAAC,CAAA;AAEnB;;;;"}